/**
  *@file SampleProtocol.h
  *@brief generated protocol source code
  *@author make_protocol.py
  *@date 03/05/19
  */

/***********************************************************
        THIS FILE IS AUTOGENERATED. DO NOT MODIFY
***********************************************************/
#include "../poly_field.h"
#include "../PolyPacket.h"


using namespace Utilities::PolyPacket; 

//Declare extern packet descriptors
extern poly_packet_desc_t* PP_ack;
extern poly_packet_desc_t* PP_SetData;
extern poly_packet_desc_t* PP_GetData;
extern poly_packet_desc_t* PP_RespData;
extern poly_packet_desc_t* PP_blockReq;
extern poly_packet_desc_t* PP_blockResp;


//Declare extern field descriptors
extern poly_field_desc_t* PF_src;
extern poly_field_desc_t* PF_dst;
extern poly_field_desc_t* PF_cmd;
extern poly_field_desc_t* PF_sensorA;
extern poly_field_desc_t* PF_sensorB;
extern poly_field_desc_t* PF_sensorName;
extern poly_field_desc_t* PF_blockOffset;
extern poly_field_desc_t* PF_blockSize;
extern poly_field_desc_t* PF_blockData;


//Classes for packet types
/**********************************************************
              AckPacket                       
**********************************************************/
class AckPacket : public PolyPacket
{
public:
  AckPacket(poly_packet_t* packet = NULL);


  //Value Getters

  //Value Setters

  //Present Getters

private:
};

/**********************************************************
              SetdataPacket                       
**********************************************************/
class SetdataPacket : public PolyPacket
{
public:
  SetdataPacket(poly_packet_t* packet = NULL);


  //Value Getters
  uint16_t Src() const {return mSrc;}
  uint16_t Dst() const {return mDst;}
  int16_t Sensora() const {return mSensora;}
  int Sensorb() const {return mSensorb;}
  string Sensorname() const {return std::string(mSensorname);}

  //Value Setters
  void Src(uint16_t val );
  void Dst(uint16_t val );
  void Sensora(int16_t val );
  void Sensorb(int val );
  void Sensorname(string val );

  //Present Getters
  bool hasSrc() const { return hasField(PF_src);}
  bool hasDst() const { return hasField(PF_dst);}
  bool hasSensora() const { return hasField(PF_sensorA);}
  bool hasSensorb() const { return hasField(PF_sensorB);}
  bool hasSensorname() const { return hasField(PF_sensorName);}

private:
  uint16_t mSrc;  //Source address of message
  uint16_t mDst;  //Desitination address of message
  int16_t mSensora;  //Value of Sensor A
  int mSensorb;  //Value of Sensor B
  char mSensorname[32];  //Name of sensor
};

/**********************************************************
              GetdataPacket                       
**********************************************************/
class GetdataPacket : public PolyPacket
{
public:
  GetdataPacket(poly_packet_t* packet = NULL);


  //Value Getters
  uint16_t Src() const {return mSrc;}
  uint16_t Dst() const {return mDst;}
  int16_t Sensora() const {return mSensora;}
  int Sensorb() const {return mSensorb;}
  string Sensorname() const {return std::string(mSensorname);}

  //Value Setters
  void Src(uint16_t val );
  void Dst(uint16_t val );
  void Sensora(int16_t val );
  void Sensorb(int val );
  void Sensorname(string val );

  //Present Getters
  bool hasSrc() const { return hasField(PF_src);}
  bool hasDst() const { return hasField(PF_dst);}
  bool hasSensora() const { return hasField(PF_sensorA);}
  bool hasSensorb() const { return hasField(PF_sensorB);}
  bool hasSensorname() const { return hasField(PF_sensorName);}

private:
  uint16_t mSrc;  //Source address of message
  uint16_t mDst;  //Desitination address of message
  int16_t mSensora;  //Value of Sensor A
  int mSensorb;  //Value of Sensor B
  char mSensorname[32];  //Name of sensor
};

/**********************************************************
              RespdataPacket                       
**********************************************************/
class RespdataPacket : public PolyPacket
{
public:
  RespdataPacket(poly_packet_t* packet = NULL);


  //Value Getters
  uint16_t Src() const {return mSrc;}
  uint16_t Dst() const {return mDst;}
  int16_t Sensora() const {return mSensora;}
  int Sensorb() const {return mSensorb;}
  string Sensorname() const {return std::string(mSensorname);}

  //Value Setters
  void Src(uint16_t val );
  void Dst(uint16_t val );
  void Sensora(int16_t val );
  void Sensorb(int val );
  void Sensorname(string val );

  //Present Getters
  bool hasSrc() const { return hasField(PF_src);}
  bool hasDst() const { return hasField(PF_dst);}
  bool hasSensora() const { return hasField(PF_sensorA);}
  bool hasSensorb() const { return hasField(PF_sensorB);}
  bool hasSensorname() const { return hasField(PF_sensorName);}

private:
  uint16_t mSrc;  //Source address of message
  uint16_t mDst;  //Desitination address of message
  int16_t mSensora;  //Value of Sensor A
  int mSensorb;  //Value of Sensor B
  char mSensorname[32];  //Name of sensor
};

/**********************************************************
              BlockreqPacket                       
**********************************************************/
class BlockreqPacket : public PolyPacket
{
public:
  BlockreqPacket(poly_packet_t* packet = NULL);


  //Value Getters
  uint16_t Src() const {return mSrc;}
  uint16_t Dst() const {return mDst;}
  uint32_t Blockoffset() const {return mBlockoffset;}
  uint32_t Blocksize() const {return mBlocksize;}

  //Value Setters
  void Src(uint16_t val );
  void Dst(uint16_t val );
  void Blockoffset(uint32_t val );
  void Blocksize(uint32_t val );

  //Present Getters
  bool hasSrc() const { return hasField(PF_src);}
  bool hasDst() const { return hasField(PF_dst);}
  bool hasBlockoffset() const { return hasField(PF_blockOffset);}
  bool hasBlocksize() const { return hasField(PF_blockSize);}

private:
  uint16_t mSrc;  //Source address of message
  uint16_t mDst;  //Desitination address of message
  uint32_t mBlockoffset;  //Offset of block being requested
  uint32_t mBlocksize;  //Size of block being requested 
};

/**********************************************************
              BlockrespPacket                       
**********************************************************/
class BlockrespPacket : public PolyPacket
{
public:
  BlockrespPacket(poly_packet_t* packet = NULL);


  //Value Getters
  uint16_t Src() const {return mSrc;}
  uint16_t Dst() const {return mDst;}
  uint32_t Blockoffset() const {return mBlockoffset;}
  uint32_t Blocksize() const {return mBlocksize;}
  uint8_t* Blockdata() {return mBlockdata;}

  //Value Setters
  void Src(uint16_t val );
  void Dst(uint16_t val );
  void Blockoffset(uint32_t val );
  void Blocksize(uint32_t val );
  void Blockdata(uint8_t* val );

  //Present Getters
  bool hasSrc() const { return hasField(PF_src);}
  bool hasDst() const { return hasField(PF_dst);}
  bool hasBlockoffset() const { return hasField(PF_blockOffset);}
  bool hasBlocksize() const { return hasField(PF_blockSize);}
  bool hasBlockdata() const { return hasField(PF_blockData);}

private:
  uint16_t mSrc;  //Source address of message
  uint16_t mDst;  //Desitination address of message
  uint32_t mBlockoffset;  //Offset of block in memory
  uint32_t mBlocksize;  //size of memory block
  uint8_t mBlockdata[64];  //actual data from memory
};



void SampleProtocol_protocol_init();
