/**
  *@file SampleProtocol.h
  *@brief generated protocol source code
  *@author make_protocol.py
  *@date 03/18/19
  */

/***********************************************************
        THIS FILE IS AUTOGENERATED. DO NOT MODIFY
***********************************************************/
#include "Utilities/PolyPacket/poly_service.h"


typedef enum{
  SP_CMD_TEST,
  SP_CMD_SEND,
  SP_CMD_STOP,
  SP_CMD_MAX_LIMIT
} sp_cmd_e;



//Declare extern packet descriptors
extern poly_packet_desc_t* SP_ACK_PACKET;
extern poly_packet_desc_t* SP_SETDATA_PACKET;
extern poly_packet_desc_t* SP_GETDATA_PACKET;
extern poly_packet_desc_t* SP_RESPDATA_PACKET;
extern poly_packet_desc_t* SP_BLOCKREQ_PACKET;
extern poly_packet_desc_t* SP_BLOCKRESP_PACKET;


//Declare extern field descriptors
extern poly_field_desc_t* SP_SRC_FIELD;
extern poly_field_desc_t* SP_DST_FIELD;
extern poly_field_desc_t* SP_CMD_FIELD;
extern poly_field_desc_t* SP_SENSORA_FIELD;
extern poly_field_desc_t* SP_SENSORB_FIELD;
extern poly_field_desc_t* SP_SENSORNAME_FIELD;
extern poly_field_desc_t* SP_BLOCKOFFSET_FIELD;
extern poly_field_desc_t* SP_BLOCKSIZE_FIELD;
extern poly_field_desc_t* SP_BLOCKDATA_FIELD;

typedef struct{
  poly_packet_t mPacket;
  bool mInitialized;
}sp_packet_t;


/*******************************************************************************
  Service Functions
*******************************************************************************/
/**
*@brief initializes protocol service
*@param ifaces number of interfaces to use
*/
void sp_service_init(int interfaceCount);

/**
  *@brief processes data in buffers
  */
void sp_service_process();

/**
  *@brief sends packet over given interface
  *@param metaPacket packet to be sent
  *@param iface index of interface to send on
  */
void sp_service_register_tx( int iface, poly_tx_callback txCallBack);

void sp_service_feed(int iface, uint8_t* data, int len);

/**
  *@brief sends packet over given interface
  *@param metaPacket packet to be sent
  *@param iface index of interface to send on
  */
HandlerStatus_e sp_send( int iface, sp_packet_t* metaPacket);


/*******************************************************************************
  Meta-Packet Functions
*******************************************************************************/

sp_packet_t* new_sp_packet(poly_packet_desc_t* desc);

void sp_teardown(sp_packet_t* metaPacket);
void sp_destroy(sp_packet_t* metaPacket);
//Define basic function macros
#define sp_print_json(msg,buf) poly_packet_print_json(&msg->mPacket, buf, false)
#define sp_parse(msg,buf,len) poly_packet_parse_buffer(&msg->mPacket, buf, len)
#define sp_pack(msg, buf) poly_packet_pack(&msg->mPacket, buf)


/*******************************************************************************
  Meta-Packet setters
*******************************************************************************/
void sp_setSrc(sp_packet_t* packet, uint16_t val);
void sp_setDst(sp_packet_t* packet, uint16_t val);
void sp_setCmd(sp_packet_t* packet, uint8_t val);
void sp_setSensora(sp_packet_t* packet, int16_t val);
void sp_setSensorb(sp_packet_t* packet, int val);
void sp_setSensorname(sp_packet_t* packet, const char* val);
void sp_setBlockoffset(sp_packet_t* packet, uint32_t val);
void sp_setBlocksize(sp_packet_t* packet, uint32_t val);
void sp_setBlockdata(sp_packet_t* packet, const uint8_t* val);

/*******************************************************************************
  Meta-Packet getters
*******************************************************************************/
uint16_t sp_getSrc(sp_packet_t* packet);
uint16_t sp_getDst(sp_packet_t* packet);
uint8_t sp_getCmd(sp_packet_t* packet);
int16_t sp_getSensora(sp_packet_t* packet);
int sp_getSensorb(sp_packet_t* packet);
char* sp_getSensorname(sp_packet_t* packet);
uint32_t sp_getBlockoffset(sp_packet_t* packet);
uint32_t sp_getBlocksize(sp_packet_t* packet);
uint8_t* sp_getBlockdata(sp_packet_t* packet);

/*******************************************************************************
  Packet Handlers
*******************************************************************************/
/*@brief Handler for ack packets */
HandlerStatus_e sp_ack_handler(sp_packet_t* ack);
/*@brief Handler for SetData packets */
HandlerStatus_e sp_setdata_handler(sp_packet_t* SetData);
/*@brief Handler for GetData packets */
HandlerStatus_e sp_getdata_handler(sp_packet_t* GetData);
/*@brief Handler for RespData packets */
HandlerStatus_e sp_respdata_handler(sp_packet_t* RespData);
/*@brief Handler for blockReq packets */
HandlerStatus_e sp_blockreq_handler(sp_packet_t* blockReq);
/*@brief Handler for blockResp packets */
HandlerStatus_e sp_blockresp_handler(sp_packet_t* blockResp);

HandlerStatus_e sp_default_handler(sp_packet_t * packet);