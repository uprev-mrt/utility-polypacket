/**
  *@file SampleProtocol_proto.cpp
  *@brief generated protocol source code
  *@author make_protocol.py
  *@date 02/26/19
  */

/***********************************************************
        THIS FILE IS AUTOGENERATED. DO NOT MODIFY
***********************************************************/

#include "SampleProtocol_proto.h"

//Declare extern packet descriptors
packet_desc_t* PP_SetData;
packet_desc_t* PP_GetData;
packet_desc_t* PP_RespData;
packet_desc_t* PP_blockReq;
packet_desc_t* PP_blockResp;


//Declare extern field descriptors
field_desc_t* PF_src;
field_desc_t* PF_dst;
field_desc_t* PF_cmd;
field_desc_t* PF_sensorA;
field_desc_t* PF_sensorB;
field_desc_t* PF_sensorName;
field_desc_t* PF_blockOffset;
field_desc_t* PF_blockSize;
field_desc_t* PF_blockData;


void SampleProtocol_proto_protocol_init()
{
  //Packet Descriptors
  PP_SetData = new_poly_packet_desc("SetData", 5 );
  PP_GetData = new_poly_packet_desc("GetData", 5 );
  PP_RespData = new_poly_packet_desc("RespData", 5 );
  PP_blockReq = new_poly_packet_desc("blockReq", 4 );
  PP_blockResp = new_poly_packet_desc("blockResp", 5 );


  //Field Descriptos
  PF_src = new_poly_field_desc("src", TYPE_UINT16_T , 1 , FORMAT_HEX );
  PF_dst = new_poly_field_desc("dst", TYPE_UINT16_T , 1 , FORMAT_HEX );
  PF_cmd = new_poly_field_desc("cmd", TYPE_UINT8_T , 1 , FORMAT_HEX );
  PF_sensorA = new_poly_field_desc("sensorA", TYPE_INT16 , 1 , FORMAT_DEC );
  PF_sensorB = new_poly_field_desc("sensorB", TYPE_INT , 1 , FORMAT_DEC );
  PF_sensorName = new_poly_field_desc("sensorName", TYPE_STRING , 16 , FORMAT_ASCII );
  PF_blockOffset = new_poly_field_desc("blockOffset", TYPE_UINT32_T , 1 , FORMAT_HEX );
  PF_blockSize = new_poly_field_desc("blockSize", TYPE_UINT32_T , 1 , FORMAT_DEC );
  PF_blockData = new_poly_field_desc("blockData", TYPE_UINT8_T , 64 , FORMAT_NONE );


  //Setting fields Descriptors for SetdataPacket
  poly_packet_desc_add_field(PP_SetData , PF_src , true );
  poly_packet_desc_add_field(PP_SetData , PF_dst , true );
  poly_packet_desc_add_field(PP_SetData , PF_sensorA , false );
  poly_packet_desc_add_field(PP_SetData , PF_sensorB , false );
  poly_packet_desc_add_field(PP_SetData , PF_sensorName , false );


  //Setting fields Descriptors for GetdataPacket
  poly_packet_desc_add_field(PP_GetData , PF_src , true );
  poly_packet_desc_add_field(PP_GetData , PF_dst , true );
  poly_packet_desc_add_field(PP_GetData , PF_sensorA , false );
  poly_packet_desc_add_field(PP_GetData , PF_sensorB , false );
  poly_packet_desc_add_field(PP_GetData , PF_sensorName , false );


  //Setting fields Descriptors for RespdataPacket
  poly_packet_desc_add_field(PP_RespData , PF_src , true );
  poly_packet_desc_add_field(PP_RespData , PF_dst , true );
  poly_packet_desc_add_field(PP_RespData , PF_sensorA , false );
  poly_packet_desc_add_field(PP_RespData , PF_sensorB , false );
  poly_packet_desc_add_field(PP_RespData , PF_sensorName , false );


  //Setting fields Descriptors for BlockreqPacket
  poly_packet_desc_add_field(PP_blockReq , PF_src , true );
  poly_packet_desc_add_field(PP_blockReq , PF_dst , true );
  poly_packet_desc_add_field(PP_blockReq , PF_blockOffset , true );
  poly_packet_desc_add_field(PP_blockReq , PF_blockSize , true );


  //Setting fields Descriptors for BlockrespPacket
  poly_packet_desc_add_field(PP_blockResp , PF_src , true );
  poly_packet_desc_add_field(PP_blockResp , PF_dst , true );
  poly_packet_desc_add_field(PP_blockResp , PF_blockOffset , true );
  poly_packet_desc_add_field(PP_blockResp , PF_blockSize , true );
  poly_packet_desc_add_field(PP_blockResp , PF_blockData , true );

}
/**********************************************************
              SetdataPacket                       
**********************************************************/


SetdataPacket::SetdataPacket()
:PolyPacket(PP_SetData)
{  //Bind all fields
  getField(PF_src)->mData = (uint16_t*) &mSrc;
  getField(PF_dst)->mData = (uint16_t*) &mDst;
  getField(PF_sensorA)->mData = (int16*) &mSensora;
  getField(PF_sensorB)->mData = (int*) &mSensorb;
  getField(PF_sensorName)->mData = (string*) &mSensorname;
  mPacket->mBound = true;
}

uint16_t SetdataPacket::Src(uint16_t  val)
{
  hasField(PF_src,true);
  mSrc = val;
}

uint16_t SetdataPacket::Dst(uint16_t  val)
{
  hasField(PF_dst,true);
  mDst = val;
}

int16 SetdataPacket::Sensora(int16  val)
{
  hasField(PF_sensorA,true);
  mSensora = val;
}

int SetdataPacket::Sensorb(int  val)
{
  hasField(PF_sensorB,true);
  mSensorb = val;
}

string SetdataPacket::Sensorname(string  val)
{
  hasField(PF_sensorName,true);
  memcpy(mSensorname, val.c_str(), min((int)val.length(),16);
}
/**********************************************************
              GetdataPacket                       
**********************************************************/


GetdataPacket::GetdataPacket()
:PolyPacket(PP_GetData)
{  //Bind all fields
  getField(PF_src)->mData = (uint16_t*) &mSrc;
  getField(PF_dst)->mData = (uint16_t*) &mDst;
  getField(PF_sensorA)->mData = (int16*) &mSensora;
  getField(PF_sensorB)->mData = (int*) &mSensorb;
  getField(PF_sensorName)->mData = (string*) &mSensorname;
  mPacket->mBound = true;
}

uint16_t GetdataPacket::Src(uint16_t  val)
{
  hasField(PF_src,true);
  mSrc = val;
}

uint16_t GetdataPacket::Dst(uint16_t  val)
{
  hasField(PF_dst,true);
  mDst = val;
}

int16 GetdataPacket::Sensora(int16  val)
{
  hasField(PF_sensorA,true);
  mSensora = val;
}

int GetdataPacket::Sensorb(int  val)
{
  hasField(PF_sensorB,true);
  mSensorb = val;
}

string GetdataPacket::Sensorname(string  val)
{
  hasField(PF_sensorName,true);
  memcpy(mSensorname, val.c_str(), min((int)val.length(),16);
}
/**********************************************************
              RespdataPacket                       
**********************************************************/


RespdataPacket::RespdataPacket()
:PolyPacket(PP_RespData)
{  //Bind all fields
  getField(PF_src)->mData = (uint16_t*) &mSrc;
  getField(PF_dst)->mData = (uint16_t*) &mDst;
  getField(PF_sensorA)->mData = (int16*) &mSensora;
  getField(PF_sensorB)->mData = (int*) &mSensorb;
  getField(PF_sensorName)->mData = (string*) &mSensorname;
  mPacket->mBound = true;
}

uint16_t RespdataPacket::Src(uint16_t  val)
{
  hasField(PF_src,true);
  mSrc = val;
}

uint16_t RespdataPacket::Dst(uint16_t  val)
{
  hasField(PF_dst,true);
  mDst = val;
}

int16 RespdataPacket::Sensora(int16  val)
{
  hasField(PF_sensorA,true);
  mSensora = val;
}

int RespdataPacket::Sensorb(int  val)
{
  hasField(PF_sensorB,true);
  mSensorb = val;
}

string RespdataPacket::Sensorname(string  val)
{
  hasField(PF_sensorName,true);
  memcpy(mSensorname, val.c_str(), min((int)val.length(),16);
}
/**********************************************************
              BlockreqPacket                       
**********************************************************/


BlockreqPacket::BlockreqPacket()
:PolyPacket(PP_blockReq)
{  //Bind all fields
  getField(PF_src)->mData = (uint16_t*) &mSrc;
  getField(PF_dst)->mData = (uint16_t*) &mDst;
  getField(PF_blockOffset)->mData = (uint32_t*) &mBlockoffset;
  getField(PF_blockSize)->mData = (uint32_t*) &mBlocksize;
  mPacket->mBound = true;
}

uint16_t BlockreqPacket::Src(uint16_t  val)
{
  hasField(PF_src,true);
  mSrc = val;
}

uint16_t BlockreqPacket::Dst(uint16_t  val)
{
  hasField(PF_dst,true);
  mDst = val;
}

uint32_t BlockreqPacket::Blockoffset(uint32_t  val)
{
  hasField(PF_blockOffset,true);
  mBlockoffset = val;
}

uint32_t BlockreqPacket::Blocksize(uint32_t  val)
{
  hasField(PF_blockSize,true);
  mBlocksize = val;
}

/**********************************************************
              BlockrespPacket                       
**********************************************************/


BlockrespPacket::BlockrespPacket()
:PolyPacket(PP_blockResp)
{  //Bind all fields
  getField(PF_src)->mData = (uint16_t*) &mSrc;
  getField(PF_dst)->mData = (uint16_t*) &mDst;
  getField(PF_blockOffset)->mData = (uint32_t*) &mBlockoffset;
  getField(PF_blockSize)->mData = (uint32_t*) &mBlocksize;
  getField(PF_blockData)->mData = (uint8_t*) &mBlockdata;
  mPacket->mBound = true;
}

uint16_t BlockrespPacket::Src(uint16_t  val)
{
  hasField(PF_src,true);
  mSrc = val;
}

uint16_t BlockrespPacket::Dst(uint16_t  val)
{
  hasField(PF_dst,true);
  mDst = val;
}

uint32_t BlockrespPacket::Blockoffset(uint32_t  val)
{
  hasField(PF_blockOffset,true);
  mBlockoffset = val;
}

uint32_t BlockrespPacket::Blocksize(uint32_t  val)
{
  hasField(PF_blockSize,true);
  mBlocksize = val;
}

uint8_t BlockrespPacket::Blockdata(uint8_t  val)
{
  hasField(PF_blockData,true);
  mBlockdata = val;
}

