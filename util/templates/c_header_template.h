/**
  *@file ${proto.fileName}.h
  *@brief generated protocol source code
  *@author make_protocol.py
  *@date 03/18/19
  */

/***********************************************************
        THIS FILE IS AUTOGENERATED. DO NOT MODIFY
***********************************************************/
#include "Utilities/PolyPacket/poly_service.h"

//Define basic function macros
#define ${proto.prefix}_print_json(msg,buf) poly_packet_print_json(msg->pPacket, buf, false)
#define ${proto.prefix}_parse(msg,buf,len) poly_packet_parse_buffer(msg->pPacket, buf, len)
#define ${proto.prefix}_pack(msg, buf) poly_packet_pack(msg->pPacket, buf)
#define ${proto.prefix}_send(iface, msg) ${proto.prefix}_service_send(iface, msg->pPacket)

//Declare extern packet descriptors
% for packet in proto.packets:
extern poly_packet_desc_t* ${packet.globalName};
% endfor


//Declare extern field descriptors
% for field in proto.fields:
extern poly_field_desc_t* ${field.globalName};
% endfor

% for packet in proto.packets:
/*
 *@brief ${packet.desc}
 */
typedef struct{
  % for field in packet.fields:
  ${field.getFieldDeclaration()}
  % endfor
  poly_packet_t* pPacket;
}${packet.structName};

% endfor

typedef struct{
  poly_packet_t mPacket;
  poly_packet_t* pPacket;
  union{
% for packet in proto.packets:
    ${packet.structName}* ${packet.name.lower()};
% endfor
} mPayload;
}${proto.prefix}_packet_t;


/*******************************************************************************
  Service Functions
*******************************************************************************/
/**
*@brief initializes protocol service
*@param ifaces number of interfaces to use
*/
void ${proto.prefix}_service_init(int interfaceCount);

/**
  *@brief processes data in buffers
  */
void ${proto.prefix}_service_process();

/**
  *@brief sends packet over given interface
  *@param metaPacket packet to be sent
  *@param iface index of interface to send on
  */
void ${proto.prefix}_service_register_tx( int iface, poly_tx_callback txCallBack);

void ${proto.prefix}_service_feed(int iface, uint8_t* data, int len);

/**
  *@brief sends packet over given interface
  *@param metaPacket packet to be sent
  *@param iface index of interface to send on
  */
HandlerStatus_e ${proto.prefix}_service_send( int iface, poly_packet_t* packet);





/*******************************************************************************
  Meta-Packet Functions
*******************************************************************************/

${proto.prefix}_packet_t* new_${proto.prefix}_packet(poly_packet_desc_t* desc);

void ${proto.prefix}_teardown(${proto.prefix}_packet_t* metaPacket);
void ${proto.prefix}_destroy(${proto.prefix}_packet_t* metaPacket);


/*******************************************************************************
  Meta-Packet setters
*******************************************************************************/
% for field in proto.fields:
  %if field.isArray:
void ${proto.prefix}_set${field.name.capitalize()}(${proto.prefix}_packet_t* packet, const ${field.getParamType()} val);
  % else:
void ${proto.prefix}_set${field.name.capitalize()}(${proto.prefix}_packet_t* packet, ${field.getParamType()} val);
  % endif
% endfor

/*******************************************************************************
  Meta-Packet getters
*******************************************************************************/
% for field in proto.fields:
${field.getParamType()} ${proto.prefix}_get${field.name.capitalize()}(${proto.prefix}_packet_t* packet);
% endfor


/*******************************************************************************
  Packet binders
*******************************************************************************/
% for packet in proto.packets:
void ${proto.prefix}_${packet.name.lower()}_bind(${packet.structName}* ${packet.name.lower()}, poly_packet_t* packet, bool copy);
% endfor


/*******************************************************************************
  Packet Handlers
*******************************************************************************/
% for packet in proto.packets:
/*@brief Handler for ${packet.name} packets */
HandlerStatus_e ${proto.prefix}_${packet.name.lower()}_handler(${packet.structName} * packet);
% endfor

HandlerStatus_e ${proto.prefix}_default_handler(${proto.prefix}_packet_t * packet);
