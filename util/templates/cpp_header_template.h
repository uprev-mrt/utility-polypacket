/**
  *@file ${proto.fileName}.h
  *@brief generated protocol source code
  *@author make_protocol.py
  *@date 03/18/19
  */

/***********************************************************
        THIS FILE IS AUTOGENERATED. DO NOT MODIFY
***********************************************************/
#include "Utilities/PolyPacket/poly_field.h"
#include "Utilities/PolyPacket/poly_packet.h"

#define {proto.prefix}_print_json(msg,buf) poly_packet_print_json(msg->mPacket, buf) 


//Declare extern packet descriptors
% for packet in proto.packets:
extern poly_packet_desc_t* ${packet.globalName};
% endfor


//Declare extern field descriptors
% for field in proto.fields:
extern poly_field_desc_t* ${field.globalName};
% endfor

% for packet in proto.packets:
/*
 *@brief ${packet.desc}
 */
typedef struct{
  % for field in packet.fields:
  ${field.getFieldDeclaration()}
  % endfor
} ${packet.structName};

% endfor

typedef union{
  uint8_t mTypeId;
  union{
% for packet in proto.packets:
    ${packet.structName}* ${packet.name.lower()};
% endfor
} mPayload;
} ${proto.prefix}_packet_t;


/**
*@brief initializes protocol service
*@param ifaces number of interfaces to use
*/
void ${proto.prefix}_service_init(int interfaceCount);

/**
  *@brief feeds incoming bytes to the service
  *@param data bytes to send
  *@param len nuber of bytes to send
  *@param iface index of interface
  */
void ${proto.prefix}_service_feed(uint8_t* data, int len, int iface);

/**
  *@brief processes data in buffers
  */
void ${proto.prefix}_service_process();


/**
  *@brief sends packet over service
  */
% for packet in proto.packets:
void ${proto.prefix}_send(${packet.structName}* ${packet.name.lower());
% endfor


void ${proto.prefix}_packet_init(${proto.prefix}_packet_t* metaPacket, poly_packet_t* packet);
void ${proto.prefix}_packet_teardown(${proto.prefix}_packet_t* metaPacket);


//Meta packet setters
% for field in proto.fields:
  %if field.isArray:
void ${proto.prefix}_set${field.name.capitalize()}(${proto.prefix}_packet_t* packet, const ${field.getParamType()} val);
  % else:
void ${proto.prefix}_set${field.name.capitalize()}(${proto.prefix}_packet_t* packet, ${field.getParamType()} val);
  % endif
% endfor

//Meta packet getters
% for field in proto.fields:
${field.getParamType()} ${proto.prefix}_get${field.name.capitalize()}(${proto.prefix}_packet_t* packet);
% endfor

//Packet binders
% for packet in proto.packets:
void ${proto.prefix}_${packet.name.lower()}_bind(${packet.structName}* ${packet.name.lower()}, poly_packet_t* packet);
% endfor



% for packet in proto.packets:
/*@brief Handler for ${packet.name} packets */
uint8_t ${proto.prefix}_${packet.name.lower()}_handler(${packet.structName} * packet);
% endfor
