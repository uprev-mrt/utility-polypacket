#!/usr/bin/python
#
#@file make_protocol.py
#@brief python script to generate code for PolyPacket
#@author Jason Berger
#@date 02/19/2019
#

import sys
import xml.etree.ElementTree as ET
import re
import StringIO
import copy
import datetime

now = datetime.datetime.now()


class fieldDesc:
    def __init__(self, name, type):
        self.id = 0
        self.name = name
        self.type = type
        self.isArray = False
        self.isVarLen = False
        self.format = 'default'
        self.arrayLen = 1
        self.isRequired = False
        self.desc = ""

class packetDesc:
    def __init__(self, name):
        self.name = name
        self.fields = {}

class protocolDesc:
    def __init__(self, name):
        self.name = name
        self.fields = {}
        self.packets = {}


def parseXML(xmlfile):

    # create element tree object
    tree = ET.parse(xmlfile)

    # get root element
    root = tree.getroot()

    # create empty list for Fields
    protocol = protocolDesc(root.attrib['name'])

    # iterate field items
    count = 0;

    #parse out fields
    for field in root.findall('./Fields/Field'):

        name = field.attrib['name']
        strType = field.attrib['type'];

        if(strType == 'string'):
            strType = 'char[]'
        arrayLen = 0
        array = False

        #see if its an array
        m = re.search('\[([0-9]*)\]', strType)
        if(m):
            array = True
            if(m.group(1) != ''):
                arrayLen = int(m.group(1))
            strType = strType[0:m.start()]

        newField = fieldDesc(name, strType)
        fieldDesc.id = count
        count+=1

        if(array):
            newField.isArray = True
            if(arrayLen>0):
                newField.arrayLen = arrayLen
            else:
                newField.isVarLen = True

        if('format' in field.attrib):
            newField.format = field.attrib['format']

        if('desc' in field.attrib):
            newField.desc = field.attrib['desc']

        if(name in protocol.fields):
            print 'ERROR Duplicate Field Name!: ' + name

        protocol.fields[name] = newField


    #get all packet types
    for packet in root.findall('./Packets/Packet'):
        name = packet.attrib['name']

        newPacket = packetDesc(name)

        if(name in protocol.packets):
            print 'ERROR Duplicate Packet Name!: ' + name

        #get all fields declared for packet
        for pfield in packet:

            pfname = pfield.attrib['name']
            strReq =""
            if not (pfname in protocol.fields):
                print 'ERROR Field not declared: ' + pfname

            fieldCopy = copy.deepcopy(protocol.fields[pfname])

            if('req' in pfield.attrib):
                strReq = pfield.attrib['req']
                if(strReq.lower() == "true" ):
                    fieldCopy.isRequired = True

            if('desc' in pfield.attrib):
                fieldCopy.desc = pfield.attrib['desc']

            newPacket.fields[pfname] = fieldCopy


        protocol.packets[name] = newPacket




    # return news items list
    return protocol

def createHeaderC(protocol):
    output = StringIO.StringIO()
    output.write('/**\n')
    output.write('  *@file '+protocol.name +'.h\n')
    output.write('  *@brief generated protocol source code\n')
    output.write('  *@author make_protocol.py\n')
    output.write('  *@date '+now.strftime("%m/%d/%y")+'\n')
    output.write('  */\n\n')
    output.write('***********************************************************\n')
    output.write('        THIS FILE IS AUTOGENERATED. DO NOT MODIFY\n')
    output.write('***********************************************************\n')

    output.write('#include \"var_field.h\"\n')
    output.write('#include \"var_packet.h\"\n\n\n')

    output.write('//Declare extern field descriptors\n')
    for field in protocol.fields.values():
        output.write('extern field_desc_t* VF_' + field.name.upper()+ ';\n')

    output.write('\n\n')
    output.write('//Declare extern packet descriptors\n')
    for packet in protocol.packets.values():
        output.write('extern packet_desc_t* VP_' + packet.name.upper()+ ';\n')

    output.write('\n\n')
    output.write('void protocol_init();\n')
    print output.getvalue()



def createSourceC(protocol):
    output = StringIO.StringIO()
    output.write('/**\n')
    output.write('  *@file '+protocol.name +'.c\n')
    output.write('  *@brief generated protocol source code\n')
    output.write('  *@author make_protocol.py\n')
    output.write('  *@date '+now.strftime("%m/%d/%y")+'\n')
    output.write('  */\n\n')
    output.write('***********************************************************\n')
    output.write('        THIS FILE IS AUTOGENERATED. DO NOT MODIFY\n')
    output.write('***********************************************************\n\n')
    output.write('#include \"'+ protocol.name + '.h\"\n\n')

    output.write('//Declare extern field descriptors\n')
    for field in protocol.fields.values():
        print field
        output.write('field_desc_t* VF_' + field.name.upper()+ ';\n')

    output.write('\n\n')
    output.write('//Declare extern packet descriptors\n')
    for packet in protocol.packets.values():
        output.write('packet_desc_t* VP_' + packet.name.upper()+ ';\n')
    output.write('\n\n\n')

    #init function
    output.write('void protocol_init()\n{\n\n')
    output.write('//Set up Field descriptors\n')
    #fields
    for field in protocol.fields.values():
        output.write('\tVF_' + field.name.upper()+ '= new_field_desc( \"'+field.name+'\" , sizeof('+ field.type +') , '+str(field.arrayLen)+');\n')

        if(field.isVarLen):
            output.write('\tVF_' + field.name.upper()+ '->mVarLen = true;\n')

        if (field.format != 'default'):
            output.write('\tVF_' + field.name.upper()+ '->mFormat = FORMAT_'+ field.format.upper()+';\n')
        output.write('\n')

    output.write('\n\n\n')
    output.write('//Set up packet descriptors\n')
    for packet in protocol.packets.values():
        output.write('\tVP_' + packet.name.upper()+ '= new_packet_desc(\"'+ packet.name+'\") ;\n')

        for pfield in packet.fields.values():
            output.write('\t\tpacket_desc_add_field( VP_'+ packet.name.upper() +', VF_'+ pfield.name.upper()+', '+ str(pfield.isRequired).lower()+');\n')
            #packet_desc_add_field(packet_desc_t* desc, field_desc_t* fieldDesc);
        output.write('\n')
    output.write('}\n\n')

    text_file = open("Output.c", "w")
    text_file.write(output.getvalue())
    text_file.close()

    print output.getvalue()






def main():
    # print command line arguments
    for arg in sys.argv[1:]:
        print arg

    xmlFile = sys.argv[1]
    protocol = parseXML(xmlFile)
    createHeaderC(protocol)
    createSourceC(protocol)

if __name__ == "__main__":
    main()
