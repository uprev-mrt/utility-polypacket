/**
  *@file SampleProtocol.h
  *@brief generated protocol source code
  *@author make_protocol.py
  *@date 03/18/19
  */

/***********************************************************
        THIS FILE IS AUTOGENERATED. DO NOT MODIFY
***********************************************************/
#include "Utilities/PolyPacket/poly_field.h"
#include "Utilities/PolyPacket/poly_packet.h"


//Declare extern packet descriptors
extern poly_packet_desc_t* ACK_P_DESC;
extern poly_packet_desc_t* SETDATA_P_DESC;
extern poly_packet_desc_t* GETDATA_P_DESC;
extern poly_packet_desc_t* RESPDATA_P_DESC;
extern poly_packet_desc_t* BLOCKREQ_P_DESC;
extern poly_packet_desc_t* BLOCKRESP_P_DESC;


//Declare extern field descriptors
extern poly_field_desc_t* SRC_F_DESC;
extern poly_field_desc_t* DST_F_DESC;
extern poly_field_desc_t* CMD_F_DESC;
extern poly_field_desc_t* SENSORA_F_DESC;
extern poly_field_desc_t* SENSORB_F_DESC;
extern poly_field_desc_t* SENSORNAME_F_DESC;
extern poly_field_desc_t* BLOCKOFFSET_F_DESC;
extern poly_field_desc_t* BLOCKSIZE_F_DESC;
extern poly_field_desc_t* BLOCKDATA_F_DESC;

/*
 *@brief 
 */
typedef struct{
} ack_packet_t;

/*
 *@brief Message to set data in node
 */
typedef struct{
    uint16_t mSrc;	//Source address of message
    uint16_t mDst;	//Desitination address of message
    int16_t mSensora;	//Value of Sensor A
    int mSensorb;	//Value of Sensor B
    char mSensorname[32];	//Name of sensor
} setdata_packet_t;

/*
 *@brief Message to get data from node
 */
typedef struct{
    uint16_t mSrc;	//Source address of message
    uint16_t mDst;	//Desitination address of message
    int16_t mSensora;	//Value of Sensor A
    int mSensorb;	//Value of Sensor B
    char mSensorname[32];	//Name of sensor
} getdata_packet_t;

/*
 *@brief Response to get/set messages
 */
typedef struct{
    uint16_t mSrc;	//Source address of message
    uint16_t mDst;	//Desitination address of message
    int16_t mSensora;	//Value of Sensor A
    int mSensorb;	//Value of Sensor B
    char mSensorname[32];	//Name of sensor
} respdata_packet_t;

/*
 *@brief This packet is used to request a block of data from the host during Ota updates
 */
typedef struct{
    uint16_t mSrc;	//Source address of message
    uint16_t mDst;	//Desitination address of message
    uint32_t mBlockoffset;	//Offset of block being requested
    uint32_t mBlocksize;	//Size of block being requested 
} blockreq_packet_t;

/*
 *@brief This packet sends a block of ota data to the node as a response to a block request
 */
typedef struct{
    uint16_t mSrc;	//Source address of message
    uint16_t mDst;	//Desitination address of message
    uint32_t mBlockoffset;	//Offset of block in memory
    uint32_t mBlocksize;	//size of memory block
    uint8_t mBlockdata[64];	//actual data from memory
} blockresp_packet_t;


typedef union{
  uint8_t mTypeId;
  union{
    ack_packet_t* ack;
    setdata_packet_t* setdata;
    getdata_packet_t* getdata;
    respdata_packet_t* respdata;
    blockreq_packet_t* blockreq;
    blockresp_packet_t* blockresp;
} mPayload;
} sp_packet_t;

void sp_packet_init(sp_packet_t* packet, poly_packet_desc_t* desc);


//Meta packet setters
void sp_setSrc(sp_packet_t* packet, uint16_t val);
void sp_setDst(sp_packet_t* packet, uint16_t val);
void sp_setCmd(sp_packet_t* packet, uint8_t val);
void sp_setSensora(sp_packet_t* packet, int16_t val);
void sp_setSensorb(sp_packet_t* packet, int val);
void sp_setSensorname(sp_packet_t* packet, const char* val);
void sp_setBlockoffset(sp_packet_t* packet, uint32_t val);
void sp_setBlocksize(sp_packet_t* packet, uint32_t val);
void sp_setBlockdata(sp_packet_t* packet, const uint8_t* val);

//Meta packet getters
uint16_t sp_getSrc(sp_packet_t* packet);
uint16_t sp_getDst(sp_packet_t* packet);
uint8_t sp_getCmd(sp_packet_t* packet);
int16_t sp_getSensora(sp_packet_t* packet);
int sp_getSensorb(sp_packet_t* packet);
char* sp_getSensorname(sp_packet_t* packet);
uint32_t sp_getBlockoffset(sp_packet_t* packet);
uint32_t sp_getBlocksize(sp_packet_t* packet);
uint8_t* sp_getBlockdata(sp_packet_t* packet);

//Packet binders
void sp_ack_bind(ack_packet_t* ack, poly_packet_t* packet);
void sp_setdata_bind(setdata_packet_t* setdata, poly_packet_t* packet);
void sp_getdata_bind(getdata_packet_t* getdata, poly_packet_t* packet);
void sp_respdata_bind(respdata_packet_t* respdata, poly_packet_t* packet);
void sp_blockreq_bind(blockreq_packet_t* blockreq, poly_packet_t* packet);
void sp_blockresp_bind(blockresp_packet_t* blockresp, poly_packet_t* packet);

/**
*@brief initializes protocol service
*@param ifaces number of interfaces to use
*/
void sp_protocol_init(int interfaceCount);

/**
  *@brief processes data in buffers
  */
void sp_protocol_process();



/*@brief Handler for ack packets */
uint8_t sp_ack_handler(ack_packet_t * packet);
/*@brief Handler for SetData packets */
uint8_t sp_setdata_handler(setdata_packet_t * packet);
/*@brief Handler for GetData packets */
uint8_t sp_getdata_handler(getdata_packet_t * packet);
/*@brief Handler for RespData packets */
uint8_t sp_respdata_handler(respdata_packet_t * packet);
/*@brief Handler for blockReq packets */
uint8_t sp_blockreq_handler(blockreq_packet_t * packet);
/*@brief Handler for blockResp packets */
uint8_t sp_blockresp_handler(blockresp_packet_t * packet);
