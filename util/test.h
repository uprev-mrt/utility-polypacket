/**
  *@file SampleProtocol.h
  *@brief generated protocol source code
  *@author make_protocol.py
  *@date 03/18/19
  */

/***********************************************************
        THIS FILE IS AUTOGENERATED. DO NOT MODIFY
***********************************************************/
#include "Utilities/PolyPacket/poly_field.h"
#include "Utilities/PolyPacket/poly_packet.h"


//Declare extern packet descriptors
extern poly_packet_desc_t* PP_ack;
extern poly_packet_desc_t* PP_SetData;
extern poly_packet_desc_t* PP_GetData;
extern poly_packet_desc_t* PP_RespData;
extern poly_packet_desc_t* PP_blockReq;
extern poly_packet_desc_t* PP_blockResp;


//Declare extern field descriptors
extern poly_field_desc_t* PF_src;
extern poly_field_desc_t* PF_dst;
extern poly_field_desc_t* PF_cmd;
extern poly_field_desc_t* PF_sensorA;
extern poly_field_desc_t* PF_sensorB;
extern poly_field_desc_t* PF_sensorName;
extern poly_field_desc_t* PF_blockOffset;
extern poly_field_desc_t* PF_blockSize;
extern poly_field_desc_t* PF_blockData;

/*
 *@brief 
 */
typedef struct{
} ack_packet_t;

/*
 *@brief Message to set data in node
 */
typedef struct{
    uint16 msrc;	//Source address of message
    uint16 mdst;	//Desitination address of message
    int16 msensorA;	//Value of Sensor A
    int msensorB;	//Value of Sensor B
    string msensorName[32];	//Name of sensor
} setdata_packet_t;

/*
 *@brief Message to get data from node
 */
typedef struct{
    uint16 msrc;	//Source address of message
    uint16 mdst;	//Desitination address of message
    int16 msensorA;	//Value of Sensor A
    int msensorB;	//Value of Sensor B
    string msensorName[32];	//Name of sensor
} getdata_packet_t;

/*
 *@brief Response to get/set messages
 */
typedef struct{
    uint16 msrc;	//Source address of message
    uint16 mdst;	//Desitination address of message
    int16 msensorA;	//Value of Sensor A
    int msensorB;	//Value of Sensor B
    string msensorName[32];	//Name of sensor
} respdata_packet_t;

/*
 *@brief This packet is used to request a block of data from the host during Ota updates
 */
typedef struct{
    uint16 msrc;	//Source address of message
    uint16 mdst;	//Desitination address of message
    uint32 mblockOffset;	//Offset of block being requested
    uint32 mblockSize;	//Size of block being requested 
} blockreq_packet_t;

/*
 *@brief This packet sends a block of ota data to the node as a response to a block request
 */
typedef struct{
    uint16 msrc;	//Source address of message
    uint16 mdst;	//Desitination address of message
    uint32 mblockOffset;	//Offset of block in memory
    uint32 mblockSize;	//size of memory block
    uint8 mblockData[64];	//actual data from memory
} blockresp_packet_t;


//Packet binders
void ack_bind(ack_packet_t* ack, poly_packet_t* packet);
void setdata_bind(setdata_packet_t* setdata, poly_packet_t* packet);
void getdata_bind(getdata_packet_t* getdata, poly_packet_t* packet);
void respdata_bind(respdata_packet_t* respdata, poly_packet_t* packet);
void blockreq_bind(blockreq_packet_t* blockreq, poly_packet_t* packet);
void blockresp_bind(blockresp_packet_t* blockresp, poly_packet_t* packet);

/**
*@brief initializes protocol service
*@param ifaces number of interfaces to use
*/
void sp_protocol_init(int ifaces);

/**
  *@brief processes data in buffers
  */
void sp_protocol_process();



/*@brief Handler for ack packets */
uint8_t sp_ack_handler(ack_packet_t * packet);
/*@brief Handler for SetData packets */
uint8_t sp_setdata_handler(setdata_packet_t * packet);
/*@brief Handler for GetData packets */
uint8_t sp_getdata_handler(getdata_packet_t * packet);
/*@brief Handler for RespData packets */
uint8_t sp_respdata_handler(respdata_packet_t * packet);
/*@brief Handler for blockReq packets */
uint8_t sp_blockreq_handler(blockreq_packet_t * packet);
/*@brief Handler for blockResp packets */
uint8_t sp_blockresp_handler(blockresp_packet_t * packet);
