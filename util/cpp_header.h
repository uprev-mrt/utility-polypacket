/**
  *@file SampleProtocol_proto.h
  *@brief generated protocol source code
  *@author make_protocol.py
  *@date 02/26/19
  */

/***********************************************************
        THIS FILE IS AUTOGENERATED. DO NOT MODIFY
***********************************************************/
#include <PolyField.h>
#include <PolyPacket.h>


using namespaceUtilities::PolyPacket; 

//Declare extern packet descriptors
extern packet_desc_t* PP_SetData;
extern packet_desc_t* PP_GetData;
extern packet_desc_t* PP_RespData;
extern packet_desc_t* PP_blockReq;
extern packet_desc_t* PP_blockResp;


//Declare extern field descriptors
extern field_desc_t* PF_src;
extern field_desc_t* PF_dst;
extern field_desc_t* PF_cmd;
extern field_desc_t* PF_sensorA;
extern field_desc_t* PF_sensorB;
extern field_desc_t* PF_sensorName;
extern field_desc_t* PF_blockOffset;
extern field_desc_t* PF_blockSize;
extern field_desc_t* PF_blockData;


//Classes for packet types
/**********************************************************
              SetdataPacket                       
**********************************************************/
Class SetdataPacket : public PolyPacket
{
public:
  SetdataPacket();


  //Value Getters
  uint16_t Src() const {return mSrc;}
  uint16_t Dst() const {return mDst;}
  int16 Sensora() const {return mSensora;}
  int Sensorb() const {return mSensorb;}
  std::string Sensorname() const {return mSensorname;}

  //Value Setters
  void Src(uint16_t val );
  void Dst(uint16_t val );
  void Sensora(int16 val );
  void Sensorb(int val );
  void Sensorname(std::string val );

  //Present Getters
  bool hasSrc() const { return hasField(PF_src);}
  bool hasDst() const { return hasField(PF_dst);}
  bool hasSensora() const { return hasField(PF_sensorA);}
  bool hasSensorb() const { return hasField(PF_sensorB);}
  bool hasSensorname() const { return hasField(PF_sensorName);}

private:
  uint16_t mSrc;  //Source address of message
  uint16_t mDst;  //Desitination address of message
  int16 mSensora;  //Value of Sensor A
  int mSensorb;  //Value of Sensor B
  char mSensorname[16];  //Name of sensor
};

/**********************************************************
              GetdataPacket                       
**********************************************************/
Class GetdataPacket : public PolyPacket
{
public:
  GetdataPacket();


  //Value Getters
  uint16_t Src() const {return mSrc;}
  uint16_t Dst() const {return mDst;}
  int16 Sensora() const {return mSensora;}
  int Sensorb() const {return mSensorb;}
  std::string Sensorname() const {return mSensorname;}

  //Value Setters
  void Src(uint16_t val );
  void Dst(uint16_t val );
  void Sensora(int16 val );
  void Sensorb(int val );
  void Sensorname(std::string val );

  //Present Getters
  bool hasSrc() const { return hasField(PF_src);}
  bool hasDst() const { return hasField(PF_dst);}
  bool hasSensora() const { return hasField(PF_sensorA);}
  bool hasSensorb() const { return hasField(PF_sensorB);}
  bool hasSensorname() const { return hasField(PF_sensorName);}

private:
  uint16_t mSrc;  //Source address of message
  uint16_t mDst;  //Desitination address of message
  int16 mSensora;  //Value of Sensor A
  int mSensorb;  //Value of Sensor B
  char mSensorname[16];  //Name of sensor
};

/**********************************************************
              RespdataPacket                       
**********************************************************/
Class RespdataPacket : public PolyPacket
{
public:
  RespdataPacket();


  //Value Getters
  uint16_t Src() const {return mSrc;}
  uint16_t Dst() const {return mDst;}
  int16 Sensora() const {return mSensora;}
  int Sensorb() const {return mSensorb;}
  std::string Sensorname() const {return mSensorname;}

  //Value Setters
  void Src(uint16_t val );
  void Dst(uint16_t val );
  void Sensora(int16 val );
  void Sensorb(int val );
  void Sensorname(std::string val );

  //Present Getters
  bool hasSrc() const { return hasField(PF_src);}
  bool hasDst() const { return hasField(PF_dst);}
  bool hasSensora() const { return hasField(PF_sensorA);}
  bool hasSensorb() const { return hasField(PF_sensorB);}
  bool hasSensorname() const { return hasField(PF_sensorName);}

private:
  uint16_t mSrc;  //Source address of message
  uint16_t mDst;  //Desitination address of message
  int16 mSensora;  //Value of Sensor A
  int mSensorb;  //Value of Sensor B
  char mSensorname[16];  //Name of sensor
};

/**********************************************************
              BlockreqPacket                       
**********************************************************/
Class BlockreqPacket : public PolyPacket
{
public:
  BlockreqPacket();


  //Value Getters
  uint16_t Src() const {return mSrc;}
  uint16_t Dst() const {return mDst;}
  uint32_t Blockoffset() const {return mBlockoffset;}
  uint32_t Blocksize() const {return mBlocksize;}

  //Value Setters
  void Src(uint16_t val );
  void Dst(uint16_t val );
  void Blockoffset(uint32_t val );
  void Blocksize(uint32_t val );

  //Present Getters
  bool hasSrc() const { return hasField(PF_src);}
  bool hasDst() const { return hasField(PF_dst);}
  bool hasBlockoffset() const { return hasField(PF_blockOffset);}
  bool hasBlocksize() const { return hasField(PF_blockSize);}

private:
  uint16_t mSrc;  //Source address of message
  uint16_t mDst;  //Desitination address of message
  uint32_t mBlockoffset;  //Offset of block being requested
  uint32_t mBlocksize;  //Size of block being requested 
};

/**********************************************************
              BlockrespPacket                       
**********************************************************/
Class BlockrespPacket : public PolyPacket
{
public:
  BlockrespPacket();


  //Value Getters
  uint16_t Src() const {return mSrc;}
  uint16_t Dst() const {return mDst;}
  uint32_t Blockoffset() const {return mBlockoffset;}
  uint32_t Blocksize() const {return mBlocksize;}
  uint8_t Blockdata() const {return mBlockdata;}

  //Value Setters
  void Src(uint16_t val );
  void Dst(uint16_t val );
  void Blockoffset(uint32_t val );
  void Blocksize(uint32_t val );
  void Blockdata(uint8_t val );

  //Present Getters
  bool hasSrc() const { return hasField(PF_src);}
  bool hasDst() const { return hasField(PF_dst);}
  bool hasBlockoffset() const { return hasField(PF_blockOffset);}
  bool hasBlocksize() const { return hasField(PF_blockSize);}
  bool hasBlockdata() const { return hasField(PF_blockData);}

private:
  uint16_t mSrc;  //Source address of message
  uint16_t mDst;  //Desitination address of message
  uint32_t mBlockoffset;  //Offset of block in memory
  uint32_t mBlocksize;  //size of memory block
  uint8_t mBlockdata[64];  //actual data from memory
};



void SampleProtocol_protocol_init();
